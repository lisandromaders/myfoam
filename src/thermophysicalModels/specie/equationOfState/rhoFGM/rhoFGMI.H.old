/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2012 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "perfectGas.H"

// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //

template<class Specie>
inline Foam::perfectGas<Specie>::perfectGas(const Specie& sp)
:
    Specie(sp)
{}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Specie>
inline Foam::perfectGas<Specie>::perfectGas
(
    const word& name,
    const perfectGas<Specie>& rf
)
:
    Specie(name, rf)
{}


template<class Specie>
inline Foam::autoPtr<Foam::perfectGas<Specie> >
Foam::perfectGas<Specie>::clone() const
{
    return autoPtr<perfectGas<Specie> >(new perfectGas<Specie>(*this));
}


template<class Specie>
inline Foam::autoPtr<Foam::perfectGas<Specie> >
Foam::perfectGas<Specie>::New(Istream& is)
{
    return autoPtr<perfectGas<Specie> >(new perfectGas<Specie>(is));
}


template<class Specie>
inline Foam::autoPtr<Foam::perfectGas<Specie> > Foam::perfectGas<Specie>::New
(
    const dictionary& dict
)
{
    return autoPtr<perfectGas<Specie> >(new perfectGas<Specie>(dict));
}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

template<class Specie>
inline Foam::scalar Foam::perfectGas<Specie>::rho(scalar p, scalar T) const
{
    return p/(this->R()*T);
}


template<class Specie>
inline Foam::scalar Foam::perfectGas<Specie>::psi(scalar, scalar T) const
{
    return 1.0/(this->R()*T);
}


template<class Specie>
inline Foam::scalar Foam::perfectGas<Specie>::Z(scalar, scalar) const
{
    return 1.0;
}


template<class Specie>
inline Foam::scalar Foam::perfectGas<Specie>::cpMcv(scalar, scalar) const
{
    return this->RR;
}


// * * * * * * * * * * * * * * * Member Operators  * * * * * * * * * * * * * //

template<class Specie>
inline void Foam::perfectGas<Specie>::operator+=(const perfectGas<Specie>& rf)
{
    Specie::operator+=(rf);
}


template<class Specie>
inline void Foam::perfectGas<Specie>::operator-=(const perfectGas<Specie>& rf)
{
    Specie::operator-=(rf);
}


template<class Specie>
inline void Foam::perfectGas<Specie>::operator*=(const scalar s)
{
    Specie::operator*=(s);
}


// * * * * * * * * * * * * * * * Friend Operators  * * * * * * * * * * * * * //

template<class Specie>
inline Foam::perfectGas<Specie> Foam::operator+
(
    const perfectGas<Specie>& rf1,
    const perfectGas<Specie>& rf2
)
{
    return perfectGas<Specie>
    (
        static_cast<const Specie&>(rf1)
      + static_cast<const Specie&>(rf2)
    );
}


template<class Specie>
inline Foam::perfectGas<Specie> Foam::operator-
(
    const perfectGas<Specie>& rf1,
    const perfectGas<Specie>& rf2
)
{
    return perfectGas<Specie>
    (
        static_cast<const Specie&>(rf1)
      - static_cast<const Specie&>(rf2)
    );
}


template<class Specie>
inline Foam::perfectGas<Specie> Foam::operator*
(
    const scalar s,
    const perfectGas<Specie>& rf
)
{
    return perfectGas<Specie>(s*static_cast<const Specie&>(rf));
}


template<class Specie>
inline Foam::perfectGas<Specie> Foam::operator==
(
    const perfectGas<Specie>& rf1,
    const perfectGas<Specie>& rf2
)
{
    return rf2 - rf1;
}


// ************************************************************************* //
